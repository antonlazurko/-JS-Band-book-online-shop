{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/Cart/Cart.module.css","views/Cart/Cart.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","Cart","dispatch","useDispatch","cartInfo","useSelector","cartSelectors","getCartInfo","cartModal","getCartModal","token","selectors","getTokenSelector","useState","modalCartInfo","setModalCartInfo","useEffect","totalPrice","reduce","acc","book","count","price","toFixed","cartLength","className","styles","cart","type","style","width","disabled","onClick","cartOperations","purchaseOperation","books","map","bookId","border","title","empty","src","alt"],"mappings":"0LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,sB,6HCqFrCC,UA1EF,WACX,IAAMC,EAAWC,cACXC,EAAWC,YAAYC,IAAcC,aACrCC,EAAYH,YAAYC,IAAcG,cACtCC,EAAQL,YAAYM,IAAUC,kBAJnB,EAMyBC,mBAAS,IANlC,mBAMVC,EANU,KAMKC,EANL,KASjBC,qBAAU,WACRD,EAAiBX,KAChB,IACH,IAAMa,EAAab,EAChBc,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,EAAKC,MAAQD,EAAKE,QAAO,GACrDC,QAAQ,GACLC,EAAapB,EAAST,OAE5B,OACE,sBAAK8B,UAAWC,IAAOC,KAAvB,UACGnB,GAAa,cAAC,IAAD,CAAWJ,SAAUU,IACnC,wBACEc,KAAK,SACLH,UAAU,4BACVI,MAAO,CAAEC,MAAO,SAChBC,UAAWP,EACXQ,QAAS,kBACP9B,EACE+B,IAAeC,kBAAkB,CAC/BC,MAAO/B,EAASgC,KAAI,SAAChB,GAAD,OAAUA,EAAKiB,UACnC3B,YATR,sBAgBEc,EAQA,gCACE,wBAAOc,OAAO,MAAMb,UAAU,QAA9B,UACE,gCACE,+BACE,sCACA,uCACA,uCACA,4CAGJ,gCACGrB,EAASgC,KAAI,SAAChB,GAAD,OACZ,+BACE,6BAAKA,EAAKmB,QACV,6BAAKnB,EAAKC,QACV,6BAAKD,EAAKE,QACV,6BAAKF,EAAKE,MAAQF,EAAKC,UAJhBD,EAAKiB,gBASpB,sBAAKZ,UAAU,aAAf,yBAEGR,EAFH,UA5BF,qBAAKQ,UAAWC,IAAOc,MAAvB,SACE,8BACE,qBAAKC,IAAKd,IAAMe,IAAI,SADtB","file":"static/js/4.446e1f5f.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cart\":\"Cart_cart__19ltl\",\"empty\":\"Cart_empty__Sb_Kc\"};","/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable import/no-unresolved */\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { cartSelectors, cartOperations } from 'redux/cart';\r\nimport { CartModal } from 'components';\r\nimport { selectors } from 'redux/books';\r\nimport cart from 'images/cart.png';\r\nimport styles from './Cart.module.css';\r\n\r\nconst Cart = () => {\r\n  const dispatch = useDispatch();\r\n  const cartInfo = useSelector(cartSelectors.getCartInfo);\r\n  const cartModal = useSelector(cartSelectors.getCartModal);\r\n  const token = useSelector(selectors.getTokenSelector);\r\n\r\n  const [modalCartInfo, setModalCartInfo] = useState([]);\r\n\r\n  // setting current curt info for purchase\r\n  useEffect(() => {\r\n    setModalCartInfo(cartInfo);\r\n  }, []);\r\n  const totalPrice = cartInfo\r\n    .reduce((acc, book) => acc + book.count * book.price, 0)\r\n    .toFixed(2);\r\n  const cartLength = cartInfo.length;\r\n\r\n  return (\r\n    <div className={styles.cart}>\r\n      {cartModal && <CartModal cartInfo={modalCartInfo} />}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-outline-secondary\"\r\n        style={{ width: '100px' }}\r\n        disabled={!cartLength}\r\n        onClick={() =>\r\n          dispatch(\r\n            cartOperations.purchaseOperation({\r\n              books: cartInfo.map((book) => book.bookId),\r\n              token,\r\n            }),\r\n          )\r\n        }\r\n      >\r\n        Purchase\r\n      </button>\r\n      {!cartLength ? (\r\n        <div className={styles.empty}>\r\n          <p>\r\n            <img src={cart} alt=\"cart\" />\r\n            Cart empty\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <table border=\"1px\" className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Count</th>\r\n                <th>Price</th>\r\n                <th>Total</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {cartInfo.map((book) => (\r\n                <tr key={book.bookId}>\r\n                  <td>{book.title}</td>\r\n                  <td>{book.count}</td>\r\n                  <td>{book.price}</td>\r\n                  <td>{book.price * book.count}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"totalPrice\">\r\n            Total price:\r\n            {totalPrice}$\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Cart;\r\n"],"sourceRoot":""}